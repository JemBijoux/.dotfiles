" Jem Bijoux's VIMRC
" Basic VIM Configuration
" WIP (probably forever)

" This file is divided into the following sections:
" Base {{{

runtime ./extensions.vim " Source the plugins from an external file
runtime ./keybindings.vim " Source the plugins from an external file

" Disable Vi compatability, not _completely_ pointless...
" http://stackoverflow.com/questions/5845557/in-a-vimrc-is-set-nocompatible-completely-useless
set nocompatible
set encoding=utf8 " Set utf8 encoding/en_US

" Enable filetype plugins, indenting, syntax
syntax on
filetype on
filetype plugin on
" load filetype-specific indent files
filetype plugin indent on


" Set our backup / swap / undofile locations
set backupdir=~/.vim/tmp/backup//
set directory=~/.vim/tmp/swap//
set undodir=~/.vim/tmp/undo//

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse+=a
endif

if &term =~ '^screen'
    " tmux knows the extended mouse mode
    set ttymouse=xterm2
endif

set vb       " Use Visual Bell (if available). Make no noise!
set autoread " Check when files changed outside of vim
set wildmenu " :command tab-completion shows additional options
set wildmode=list:longest " command completion acts more like shell
set history=1000 " Keep a longer history
set hidden  " Allow modified buffers to sit in the background:u
set nowrap " Don't wrap text by default"
set sidescroll=1 " Scroll horizontally in a sane way

" Stop from automatically opening new comment lines
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

runtime macros/matchit.vim  " % key also matches if/else/end/xml tags
set shortmess=a " Display shorter messages / hit enter prompts.
let loaded_netrwPlugin = 1 " Disable the netrwPlugin (we use nerdtree)

" }}}
" Plugins {{{

" Status Bar
set laststatus=2 " Always show status line
set modelines=1   " Set file modeline.
" (we also have airline configured in extensions.vim)


" }}}
" Theme / Visual Settings {{{

syntax on 		" Syntax Highlighting
" let g:solarized_visibility='low'
" set background=dark
colorscheme base16-flat-dark
" let base16colorspace=256

" Make mustache/handlebars the default filetype for html
au BufRead,BufNewFile *.html set filetype=mustache



" }}}
" Tab Stop Settings {{{

set expandtab       " tabs are spaces
set autoindent
set tabstop=2       " number of visual spaces per TAB
set softtabstop=2   " number of spaces in tab when editing
set shiftwidth=2    " number of spaces for auto autoindent (>>)



" }}}
" UI Config {{{

set relativenumber      " show line numbers
set number              " but still show current linenumber
set showcmd             " show command in bottom bar
set cursorline          " highlight current line
set showmatch           " highlight matching [{()}
set listchars=tab:▸\ ,trail:·,eol:¬" Trailing characters to display
set list                " Display said end of line characters
set backspace=indent,eol,start " Backspace over end of lines and past start
let &colorcolumn="80,".join(range(120,999),",") " Highlight 80 / Past 120
set splitbelow " New horizontal splits open below"
set splitright " New vertical splits open on the right"



" }}}
" Searching {{{

set hlsearch            " Highlight search terms...
set incsearch           " ...dynamically as they are typed.
set ignorecase          " Ignore case for searching
set smartcase           " Unless you include a capital in the search



" }}}
" Folding {{{

set foldenable          " enable folding
set foldlevelstart=10   " open most folds by default
set foldnestmax=10      " 10 nested fold max

set foldmethod=indent   " fold based on indent level

" }}}
" Ultisnips (Snippets) {{{

" Setting the next/prev completion for YCM frees it up for UltiSnips

let g:UltiSnipsEditSplit='context'

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsListSnippets="<s-tab>"
let g:ycm_key_list_select_completion = ['<c-j>']
let g:ycm_key_list_previous_completion = ['<c-k>']
let g:UltiSnipsJumpForwardTrigger="<c-l>"
let g:UltiSnipsJumpBackwardTrigger="<c-h>"

let g:UltiSnipsSnippetsDir = "~/.vim/UltiSnips"
let g:UltiSnipsSnippetDirectories=["UltiSnips", "snips"]
let g:UltiSnipsEditSplit= "context"


" }}}
" Prettier (JS Formatter) {{{
autocmd FileType javascript setlocal formatprg=./node_modules/.bin/prettier\
autocmd FileType javascript.jsx setlocal formatprg=./node_modules/.bin/prettier\ 

" }}}
" Typescript {{{

autocmd FileType typescript setlocal formatprg=./node_modules/.bin/prettier\ 
autocmd FileType typescript.jsx setlocal formatprg=./node_modules/.bin/prettier\ 
autocmd BufNewFile,BufReadPost *.tsx set filetype=typescript.jsx
autocmd BufNewFile,BufReadPost *.ts set filetype=typescript

" }}}
" DiffOrig Command {{{
"
" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
        \ | wincmd p | diffthis
endif



" }}}
"

highlight Comment cterm=italic

let g:syntastic_python_checkers = ['flake8']
" vim:foldmethod=marker:foldlevel=0
